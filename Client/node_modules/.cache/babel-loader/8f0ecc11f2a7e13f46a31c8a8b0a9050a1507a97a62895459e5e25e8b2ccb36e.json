{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\06\\\\Expense-Tracker\\\\Client\\\\src\\\\components\\\\Home\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport NewExpense from '../NewExpense/NewExpense';\nimport Expenses from '../Expenses/Expenses';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  useEffect(() => {\n    const fetchDataAndSetExpenses = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/get-data');\n        const result = await response.json();\n\n        // Check and filter out items without a valid 'date' property\n        const validExpenses = result.map(name => ({\n          // Adjust the property names based on your actual data structure\n          id: Math.floor(Math.random() * 100000),\n          title: name,\n          amount: 0,\n          // You might need to adjust this based on your actual data\n          date: new Date()\n        }));\n        setExpenses(validExpenses);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchDataAndSetExpenses();\n  }, []); // Empty dependency array ensures this effect runs only once when the component mounts\n\n  const addExpenseHandler = async expense => {\n    try {\n      const response = await fetch('http://localhost:8080/push-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(expense)\n      });\n      console.log(response);\n\n      // Fetch the updated data after adding a new expense\n      fetchDataAndSetExpenses();\n    } catch (error) {\n      console.error('Error adding expense:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewExpense, {\n      onAddExpense: addExpenseHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Expenses, {\n      items: expenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Home, \"XCaxB2DEspMpdgcH+IrrPBpyP4o=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","NewExpense","Expenses","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","expenses","setExpenses","fetchDataAndSetExpenses","response","fetch","result","json","validExpenses","map","name","id","Math","floor","random","title","amount","date","Date","error","console","addExpenseHandler","expense","method","headers","body","JSON","stringify","log","children","onAddExpense","fileName","_jsxFileName","lineNumber","columnNumber","items","_c","$RefreshReg$"],"sources":["E:/Project/06/Expense-Tracker/Client/src/components/Home/Home.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport NewExpense from '../NewExpense/NewExpense';\r\nimport Expenses from '../Expenses/Expenses';\r\n\r\nconst Home = () => {\r\n  const [expenses, setExpenses] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAndSetExpenses = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/get-data');\r\n        const result = await response.json();\r\n\r\n        // Check and filter out items without a valid 'date' property\r\n        const validExpenses = result.map((name) => ({\r\n          // Adjust the property names based on your actual data structure\r\n          id: Math.floor(Math.random() * 100000),\r\n          title: name,\r\n          amount: 0, // You might need to adjust this based on your actual data\r\n          date: new Date(),\r\n        }));\r\n\r\n        setExpenses(validExpenses);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchDataAndSetExpenses();\r\n  }, []); // Empty dependency array ensures this effect runs only once when the component mounts\r\n\r\n  const addExpenseHandler = async (expense) => {\r\n    try {\r\n      const response = await fetch('http://localhost:8080/push-data', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(expense),\r\n      });\r\n\r\n      console.log(response);\r\n\r\n      // Fetch the updated data after adding a new expense\r\n      fetchDataAndSetExpenses();\r\n    } catch (error) {\r\n      console.error('Error adding expense:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NewExpense onAddExpense={addExpenseHandler} />\r\n      <Expenses items={expenses} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5C,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMY,uBAAuB,GAAG,MAAAA,CAAA,KAAY;MAC1C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAEpC;QACA,MAAMC,aAAa,GAAGF,MAAM,CAACG,GAAG,CAAEC,IAAI,KAAM;UAC1C;UACAC,EAAE,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC;UACtCC,KAAK,EAAEL,IAAI;UACXM,MAAM,EAAE,CAAC;UAAE;UACXC,IAAI,EAAE,IAAIC,IAAI,CAAC;QACjB,CAAC,CAAC,CAAC;QAEHhB,WAAW,CAACM,aAAa,CAAC;MAC5B,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDhB,uBAAuB,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMkB,iBAAiB,GAAG,MAAOC,OAAO,IAAK;IAC3C,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DkB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;MAC9B,CAAC,CAAC;MAEFF,OAAO,CAACQ,GAAG,CAACxB,QAAQ,CAAC;;MAErB;MACAD,uBAAuB,CAAC,CAAC;IAC3B,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,oBACEvB,OAAA,CAAAE,SAAA;IAAA+B,QAAA,gBACEjC,OAAA,CAACH,UAAU;MAACqC,YAAY,EAAET;IAAkB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC/CtC,OAAA,CAACF,QAAQ;MAACyC,KAAK,EAAElC;IAAS;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC7B,CAAC;AAEP,CAAC;AAAClC,EAAA,CApDID,IAAI;AAAAqC,EAAA,GAAJrC,IAAI;AAsDV,eAAeA,IAAI;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}